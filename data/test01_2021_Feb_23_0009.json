{"expInfo": {"ID": "test01", "frameRate": 60.0}, "performTraining": "False", "performStaircase": "True", "performSession": "False", "EEG": "False", "attention": "False", "globalClock": "<psychopy.clock.Clock object at 0x0000020B7376B208>", "trainingClock": "<psychopy.clock.Clock object at 0x0000020B7376B128>", "trialClock": "<psychopy.clock.Clock object at 0x0000020B7376B160>", "responseDevice": "buttonBox", "keyBoard": "<psychopy.hardware.keyboard.Keyboard object at 0x0000020B7376B1D0>", "buttonBox": "<XidDevice \"Cedrus RB-830\">", "stairSamples": "30", "expFileName": "data\\test01_2021_Feb_23_0009", "win": "Window(allowGUI=True, allowStencil=False, args=UNKNOWN, autoLog=True, bitsMode=UNKNOWN, blendMode='avg', bpc=(8, 8, 8), color='grey', colorSpace='named', depthBits=8, fullscr=<method-wrapper '__getattribute__' of attributeSetter object at 0x0000020B73A296D8>, gamma=None, gammaErrorPolicy='raise', kwargs=UNKNOWN, lms=UNKNOWN, monitor=<psychopy.monitors.calibTools.Monitor object at 0x0000020B7376B358>, multiSample=False, name='window1', numSamples=2, pos=[0.0, 0.0], screen=1, size=array([1920, 1080]), stencilBits=0, stereo=False, units='deg', useFBO=False, useRetina=False, viewOri=0.0, viewPos=None, viewScale=None, waitBlanking=True, winType='pyglet')", "frameRate": "60.0", "data": "<psychopy.data.experiment.ExperimentHandler object at 0x0000020B73788EF0>", "instructionScreen": "ImageStim(__class__=<class 'psychopy.visual.image.ImageStim'>, autoLog=True, color=array([1., 1., 1.]), colorSpace='rgb', contrast=1.0, depth=-1.0, flipHoriz=False, flipVert=False, image='materials/instructions\\\\13_end.png', interpolate=True, mask=None, maskParams=None, name='unnamed ImageStim', opacity=1.0, ori=0.0, pos=array([0., 0.]), size=array([30.15272354, 16.96090699]), texRes=128, units='deg', win=Window(...))", "fixationCross": "ShapeStim(__class__=<class 'psychopy.visual.shape.ShapeStim'>, autoDraw=False, autoLog=True, closeShape=True, contrast=1.0, depth=0, fillColor='white', fillColorSpace='named', interpolate=True, lineColor='white', lineColorSpace='named', lineWidth=0, name='unnamed ShapeStim', opacity=1.0, ori=array(0.), pos=array([0., 0.]), size=array([1., 1.]), units='pix', vertices=ndarray(...), win=Window(...), windingRule=None)", "dot": "Circle(__class__=<class 'psychopy.visual.circle.Circle'>, autoDraw=False, autoLog=True, closeShape=True, color=method-wrapper(...), colorSpace=None, contrast=1.0, depth=0, fillColor='white', fillColorSpace='named', fillRGB=array([255., 255., 255.]), interpolate=True, lineColor=array([1., 1., 1.]), lineColorSpace='rgb', lineRGB=array([1., 1., 1.]), lineWidth=0, name='unnamed Circle', opacity=1.0, ori=array(0.), pos=array([0., 0.]), size=array([8., 8.]), units='pix', vertices=ndarray(...), win=Window(...))", "arrow": "ShapeStim(__class__=<class 'psychopy.visual.shape.ShapeStim'>, autoDraw=False, autoLog=True, closeShape=True, contrast=1.0, depth=0, fillColor='black', fillColorSpace='named', interpolate=True, lineColor='white', lineColorSpace='named', lineWidth=0, name='unnamed ShapeStim', opacity=1.0, ori=90, pos=array([0., 0.]), size=array([1., 1.]), units='pix', vertices=ndarray(...), win=Window(...), windingRule=None)", "gabor": "GratingStim(__class__=<class 'psychopy.visual.grating.GratingStim'>, autoDraw=False, autoLog=True, blendmode='avg', color=array([1., 1., 1.]), colorSpace='rgb', contrast=1.0, depth=-2.0, interpolate=True, mask='gauss', maskParams=None, name='gaborUpLeft', opacity=0.03355443200000001, ori=90, phase=array([1., 1.]), pos=array([-77., -77.]), rgbPedestal=array([0., 0., 0.]), sf=array([0.0375, 0.0375]), size=array([128., 128.]), tex='sin', texRes=512, units='pix', win=Window(...))", "responseScreen": "ImageStim(__class__=<class 'psychopy.visual.image.ImageStim'>, autoLog=True, color=array([1., 1., 1.]), colorSpace='rgb', contrast=1.0, depth=-1.0, flipHoriz=False, flipVert=False, image='materials\\\\orientations.png', interpolate=True, mask=None, maskParams=None, name='unnamed ImageStim', opacity=1.0, ori=0.0, pos=array([0., 0.]), size=array([30.15272354, 16.96090699]), texRes=128, units='deg', win=Window(...))", "fixationShape": "cross", "fixationDur": "2000", "gaborDur": "33", "postFixationDur": "1200", "blockLength": "20", "welcome": "materials/instructions\\1_welcome.png", "training_instruction": "materials/instructions\\2_instruction.png", "location_instruction": "materials/instructions\\3_location_demo.png", "orientation_instruction": "materials/instructions\\4_orientation_demo.png", "pas_instruction": "materials/instructions\\5_pas_demo.png", "training_start": "materials/instructions\\6_training_start.png", "training_end": "materials/instructions\\7_training_end.png", "correct_screen": "materials/instructions\\8_correct.png", "incorrect_screen": "materials/instructions\\9_incorrect.png", "staircase_start": "materials/instructions\\10_staircase_start.png", "session_start": "materials/instructions\\11_session_start.png", "break": "materials/instructions\\12_break.png", "end": "materials/instructions\\13_end.png", "training_trials_file": "materials\\training_trials.csv", "trainingConditions": [{"x": 77, "y": 77, "orientation": -45}, {"x": 77, "y": 77, "orientation": 0}, {"x": 77, "y": 77, "orientation": 45}, {"x": 77, "y": 77, "orientation": 90}, {"x": -77, "y": 77, "orientation": -45}], "trainingTrials": "psychopy.data.TrialHandler(\n\tdata={'ran': masked_array(\n  data=[[0.0],\n        [0.0],\n        [0.0],\n        [0.0],\n        [0.0]],\n  mask=[[False],\n        [False],\n        [False],\n        [False],\n        [False]],\n  fill_value=1e+20,\n  dtype=float32), 'order': masked_array(\n  data=[[--],\n        [--],\n        [--],\n        [--],\n        [--]],\n  mask=[[ True],\n        [ True],\n        [ True],\n        [ True],\n        [ True]],\n  fill_value=1e+20,\n  dtype=float32)}\n\tautoLog=True\n\textraInfo=None\n\tfinished=False\n\tmethod=random\n\tnRemaining=5\n\tnReps=1\n\tnTotal=5\n\tname=\n\torigin=None\n\toriginPath=<class 'str'>\n\tseed=None\n\tsequenceIndices=<class 'numpy.ndarray'>\n\tthisIndex=0\n\tthisN=-1\n\tthisRepN=0\n\tthisTrial=[]\n\tthisTrialN=-1\n\ttrialList=<class 'list'>\n)", "trials_file": "materials\\experiment_trials.csv", "experimentConditions": [{"x": 77, "y": 77, "orientation": -45}, {"x": 77, "y": 77, "orientation": 0}, {"x": 77, "y": 77, "orientation": 45}, {"x": 77, "y": 77, "orientation": 90}, {"x": -77, "y": 77, "orientation": -45}, {"x": -77, "y": 77, "orientation": 0}, {"x": -77, "y": 77, "orientation": 45}, {"x": -77, "y": 77, "orientation": 90}, {"x": 77, "y": -77, "orientation": -45}, {"x": 77, "y": -77, "orientation": 0}, {"x": 77, "y": -77, "orientation": 45}, {"x": 77, "y": -77, "orientation": 90}, {"x": -77, "y": -77, "orientation": -45}, {"x": -77, "y": -77, "orientation": 0}, {"x": -77, "y": -77, "orientation": 45}, {"x": -77, "y": -77, "orientation": 90}], "experimentTrials": "psychopy.data.TrialHandler(\n\tdata={'ran': masked_array(\n  data=[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],\n  mask=[[False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False],\n        [False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False],\n        [False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False],\n        [False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False],\n        [False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False],\n        [False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False],\n        [False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False],\n        [False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False],\n        [False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False],\n        [False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False],\n        [False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False],\n        [False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False],\n        [False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False],\n        [False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False],\n        [False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False],\n        [False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False, False, False,\n         False, False, False, False, False, False, False]],\n  fill_value=1e+20,\n  dtype=float32), 'order': masked_array(\n  data=[[--, --, --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n         --, --, --, --, --, --, --, --, --],\n        [--, --, --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n         --, --, --, --, --, --, --, --, --],\n        [--, --, --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n         --, --, --, --, --, --, --, --, --],\n        [--, --, --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n         --, --, --, --, --, --, --, --, --],\n        [--, --, --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n         --, --, --, --, --, --, --, --, --],\n        [--, --, --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n         --, --, --, --, --, --, --, --, --],\n        [--, --, --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n         --, --, --, --, --, --, --, --, --],\n        [--, --, --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n         --, --, --, --, --, --, --, --, --],\n        [--, --, --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n         --, --, --, --, --, --, --, --, --],\n        [--, --, --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n         --, --, --, --, --, --, --, --, --],\n        [--, --, --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n         --, --, --, --, --, --, --, --, --],\n        [--, --, --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n         --, --, --, --, --, --, --, --, --],\n        [--, --, --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n         --, --, --, --, --, --, --, --, --],\n        [--, --, --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n         --, --, --, --, --, --, --, --, --],\n        [--, --, --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n         --, --, --, --, --, --, --, --, --],\n        [--, --, --, --, --, --, --, --, --, --, --, --, --, --, --, --,\n         --, --, --, --, --, --, --, --, --]],\n  mask=[[ True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True],\n        [ True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True],\n        [ True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True],\n        [ True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True],\n        [ True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True],\n        [ True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True],\n        [ True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True],\n        [ True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True],\n        [ True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True],\n        [ True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True],\n        [ True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True],\n        [ True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True],\n        [ True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True],\n        [ True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True],\n        [ True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True],\n        [ True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True,  True,  True,\n          True,  True,  True,  True,  True,  True,  True]],\n  fill_value=1e+20,\n  dtype=float32)}\n\tautoLog=True\n\textraInfo=None\n\tfinished=False\n\tmethod=random\n\tnRemaining=400\n\tnReps=25\n\tnTotal=400\n\tname=\n\torigin=None\n\toriginPath=<class 'str'>\n\tseed=None\n\tsequenceIndices=<class 'numpy.ndarray'>\n\tthisIndex=0\n\tthisN=-1\n\tthisRepN=0\n\tthisTrial=[]\n\tthisTrialN=-1\n\ttrialList=<class 'list'>\n)", "locationResponse": {"image": "materials\\locations.png", "keys": [2, 3, 4, 5], "correct": null, "responseCode": {"(77, 77)": [5], "(77, -77)": [4], "(-77, 77)": [2], "(-77, -77)": [3]}}, "orientationResponse": {"image": "materials\\orientations.png", "keys": [0, 1, 6, 7], "correct": null, "responseCode": {"0": [0], "-45": [1], "90": [6], "45": [7]}}, "pasResponse": {"image": "materials\\pas.png", "keys": [0, 1, 6, 7], "correct": null, "responseCode": {"0": [1], "1": [2], "6": [3], "7": [4]}}, "staircaseTrials": "<psychopy.data.staircase.StairHandler object at 0x0000020B738F74A8>", "core": "<module 'psychopy.core' from 'C:\\\\Program Files\\\\PsychoPy3\\\\lib\\\\site-packages\\\\psychopy\\\\core.py'>", "set_data": "<function setup_EEG.<locals>.set_data at 0x0000020B738E1510>"}